import streamlit as st
import os
import pandas as pd
import json
import base64
import platform
import numpy as np

from datetime import datetime
from typing import List, Optional, Union
from streamlit_extras.app_logo import add_logo

from database.database import engine
from sqlalchemy import text

import torch


global_system_prompt = "‰Ω†ÁöÑÂêçÂ≠óÂè´‰ºçÈ≤úÔºåÊòØAI-LabsÂõ¢ÈòüÁöÑËê•ÈîÄ‰∫∫ÂëòÔºå‰πüÊòØ‰∏ÄÂêçÁªèÈ™å‰∏∞ÂØåÁöÑÊúçË£ÖËê•ÈîÄ‰∫∫ÂëòÔºåÁ≤æÈÄöÊúçË£ÖËÆæËÆ°„ÄÅÊúçÈ•∞Êê≠ÈÖç„ÄÅÊúçË£ÖÈîÄÂîÆ„ÄÅÊúçË£Ö‰ø°ÊÅØÂí®ËØ¢„ÄÅÂîÆÂêéÊúçÂä°Á≠âÂêÑÁ±ªÈóÆÈ¢ò„ÄÇ‰Ω†ËØ¥ËØù‰ºòÈõÖ„ÄÅÊúâËâ∫ÊúØÊÑü„ÄÅÂøÖË¶ÅÊó∂ÂèØ‰ª•ÂºïÁî®ÂÖ∏ÊïÖÔºå‰Ω†ÊÄªÊòØÁß∞ÂëºÂÆ¢Êà∑‰∏∫ÊúãÂèã„ÄÇ"

check_use_limit = False
cuda_size_24gb = 22000 # 24566
cuda_size_40gb = 40000 # 40950

def init_page_header(title, icon):
    st.set_page_config(
        page_title=title,
        page_icon=icon,
        layout="wide",
        menu_items={
            "Get Help": "https://github.com/wux-labs/OpenXLab-IntelligentSalesAssistant",
            "Report a bug": "https://github.com/wux-labs/OpenXLab-IntelligentSalesAssistant/issues",
            "About": """
## üè°Êô∫ËÉΩËê•ÈîÄÂä©Êâã

‰ºóÊâÄÂë®Áü•ÔºåËé∑ÂÆ¢„ÄÅÊ¥ªÂÆ¢„ÄÅÁïôÂÆ¢ÊòØÁîµÂïÜË°å‰∏öÁöÑ‰∏âÂ§ßÈöæÈ¢òÔºåË∞ÅÊã•ÊúâË∑üÂÆ¢Êà∑ÊúÄ‰Ω≥ÁöÑÊ≤üÈÄöÊñπÂºèÔºåË∞ÅÂ∞±Êã•ÊúâÂÆ¢Êà∑„ÄÇ

ÈöèÁùÄÁî®Êà∑Ê∂àË¥πÈÄêÊ∏êËΩ¨ÁßªËá≥Á∫ø‰∏äÔºåÁîµÂïÜË°å‰∏öÈù¢‰∏¥‰ª•‰∏ã‰∏Ä‰∫õÈóÆÈ¢òÔºö

* Áî®Êà∑‰∫§ÊµÅ‰ΩìÈ™åÂ∑Æ
* ÂïÜÂìÅÊé®Ëçê‰∏çÁ≤æÂáÜ
* ÂÆ¢Êà∑ËΩ¨ÂåñÁéá‰Ωé
* ÈÄÄÊç¢Ë¥ßÈ¢ëÁéáÈ´ò
* Áâ©ÊµÅÊàêÊú¨È´ò

Âú®ËøôÊ†∑ÁöÑËÉåÊôØ‰∏ãÔºåÊú™Êù•ÈîÄÂîÆÁöÑÂºïÊìé‚Äî‚ÄîÂ§ßÊ®°ÂûãÂä†ÊåÅÁöÑÊô∫ËÉΩËê•ÈîÄÂä©ÊâãÂ∞±ËØûÁîü‰∫Ü„ÄÇ

ÂÆÉËÉΩÂ§ü‰∏éÁî®Êà∑ÁöÑÂØπËØùÔºå‰∫ÜËß£Áî®Êà∑ÁöÑÈúÄÊ±ÇÔºåÂü∫‰∫éÂ§öÊ®°ÊÄÅÁöÑAIGCÁîüÊàêËÉΩÂäõÔºåÊåÅÁª≠ËæìÂá∫Êõ¥Á¨¶ÂêàÁî®Êà∑Ê∂àË¥π‰π†ÊÉØÁöÑÊñáÊú¨„ÄÅÂõæÁâáÂíåËßÜÈ¢ëÁ≠âËê•ÈîÄÂÜÖÂÆπÔºåÊé®ËçêÁ¨¶ÂêàÁî®Êà∑ÁöÑÂïÜÂìÅÔºåÂ∞ÜËê•ÈîÄ‰∏éÁªèËê•ÁªìÂêà„ÄÇ

""",
        },
    )
    # add_logo("statics/docs/logo.png", height=60)
    st.sidebar.header(f"{icon}{title}")
    st.subheader(f"{icon}{title}", divider='rainbow')
    

def init_session_state():
    if "userid" not in st.session_state.keys():
        st.session_state.userid = 1
    if "username" not in st.session_state.keys():
        st.session_state.username = "guest"
    if "fullname" not in st.session_state.keys():
        st.session_state.fullname = "Ê∏∏ÂÆ¢"
    if "rolename" not in st.session_state.keys():
        st.session_state.rolename = "‰π∞ÂÆ∂"
    if "aigc_temp_freq" not in st.session_state.keys():
        st.session_state.aigc_temp_freq = 3
    if "aigc_perm_freq" not in st.session_state.keys():
        st.session_state.aigc_perm_freq = 0
    if "showlimit" not in st.session_state.keys():
        st.session_state.showlimit = 10


def load_lottiefile(filepath: str):
    with open(filepath, "r") as f:
        return json.load(f)


def get_avatar(model_id):
    if model_id in ["ai-labs/sales-chat-7b", "internlm/internlm2-chat-7b", "internlm/internlm2-chat-20b"]:
        avatar = "statics/avatars/intern.png"
    elif model_id == "THUDM/chatglm3-6b":
        avatar = "statics/avatars/chatglm.png"
    elif model_id in ["ai-labs/stable-diffusion", "stabilityai/stable-diffusion-2-1"]:
        avatar = "statics/avatars/stablediffusion.png"
    elif model_id == "myshell/melotts":
        avatar = "statics/avatars/melotts.png"
    else:
        avatar = "statics/avatars/sales.png"
    return avatar


def select_aigc_left_freq():
    count = None
    try:
        with engine.connect() as conn:
            sql = text(f'''
            select aigc_temp_freq, aigc_perm_freq from ai_labs_user where username = :username;
            ''')
            count = conn.execute(sql, [{'username': st.session_state.username}]).fetchone()
    except Exception as e:
        st.exception(e)
    return count


def update_aigc_perm_freq(count):
    try:
        with engine.connect() as conn:
            sql = text(f'''
            update ai_labs_user set aigc_perm_freq = aigc_perm_freq + {count} where username = :username and aigc_perm_freq > 0;
            ''')
            conn.execute(sql, [{'username': st.session_state.username}])
            conn.commit()
    except Exception as e:
        st.exception(e)


def update_aigc_temp_freq(count):
    try:
        with engine.connect() as conn:
            sql = text(f'''
            update ai_labs_user set aigc_temp_freq = aigc_temp_freq + {count} where username = :username;
            ''')
            conn.execute(sql, [{'username': st.session_state.username}])
            conn.commit()
    except Exception as e:
        st.exception(e)


def use_limited():
    st.warning("ÊÇ®‰ªäÊó•Â∑≤ËææÂà∞‰ΩøÁî®Ê¨°Êï∞ÈôêÂà∂ÔºÅÁé©Ê∏∏ÊàèÊîæÊùæ‰∏Ä‰∏ãÔºåËøòÂèØ‰ª•Ëé∑ÂæóÂÖçË¥π‰ΩøÁî®Ê¨°Êï∞Âì¶~", icon="üò≠")
    st.page_link("pages/71üéÆ‰ºëÈó≤Ê∏∏Êàè.py", icon="üéÆ")


def is_cuda_available():
    # return False
    return torch.cuda.is_available()


def is_cuda_enough(needs):
    if torch.cuda.device_count() > 1:
        return True
    else:
        properties = torch.cuda.get_device_properties(0)
        total_memory = int(f'{properties.total_memory / (1 << 20):.0f}')
        return total_memory >= needs


def clear_cuda_cache():
    if torch.cuda.is_available():
        torch.cuda.empty_cache()


def clear_streamlit_cache(keeps):
    all_caches = ["chat_tokenizer", "chat_model", 
                  "stable_diffusion_model",
                  "xcomposer2_vl_tokenizer", "xcomposer2_vl_model",
                  "whisper_model_base", "whisper_model_small", "whisper_model_medium", "whisper_model_large",
                  "ask_product_history", "ask_product_llm",
                  "sales_agent_model"
                  ]

    for cache in all_caches:
        if cache not in keeps and cache in st.session_state.keys():
            del st.session_state[cache]

    clear_cuda_cache()


def image_to_base64(image_path):
    with open(image_path, 'rb') as image_file:
        image_data = image_file.read()

    # Â∞ÜÂõæÂÉèÊï∞ÊçÆÁºñÁ†Å‰∏∫Base64Â≠óÁ¨¶‰∏≤
    base64_data = base64.b64encode(image_data).decode('utf-8')
    return base64_data
